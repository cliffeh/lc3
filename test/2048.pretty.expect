.ORIG x3000
MAIN
  LD R6, STACK
  LEA R5, BOARD
  LEA R0, INSTRUCTION_MESSAGE
  PUTS
  LEA R0, PROMPT_TYPE_MESSAGE
  JSR PROMPT
  BRp NEW
  STI R0, CLEAR_STRING_PTR
  LD R1, BOARD_LABELS_TBL_PTR_PTR
  LD R2, TEXT_BOARD_LABELS_TBL_PTR
  STR R2, R1, #0
NEW
  JSR RESET_BOARD
LOOP
  JSR DISPLAY_BOARD
  JSR GET_KEY
  LD R0, DEAD
  BRp IS_DEAD
  BRnzp LOOP
IS_DEAD
  JSR DISPLAY_BOARD
  LEA R0, DEATH_MESSAGE
  PUTS
  LEA R0, PROMPT_DEATH_MESSAGE
  JSR PROMPT
  BRp NEW
  HALT
STACK
  .FILL x4000
DEAD
  .FILL x0
BOARD
  .FILL x1
  .FILL x7
  .FILL x8
  .FILL xF
  .FILL x1
  .FILL x6
  .FILL x9
  .FILL xE
  .FILL x2
  .FILL x5
  .FILL xA
  .FILL xD
  .FILL x3
  .FILL x4
  .FILL xB
  .FILL xC
CLEAR_STRING_PTR
  .FILL CLEAR_STRING
BOARD_LABELS_TBL_PTR_PTR
  .FILL BOARD_LABELS_TBL_PTR
TEXT_BOARD_LABELS_TBL_PTR
  .FILL TEXT_BOARD_LABELS_TBL
PROMPT_TYPE_MESSAGE
  .STRINGZ "Are you on an ANSI terminal (y/n)? "
PROMPT_DEATH_MESSAGE
  .STRINGZ "Would you like to play again (y/n)? "
DEATH_MESSAGE
  .STRINGZ "\nYou lost :(\n\n"
INSTRUCTION_MESSAGE
  .STRINGZ "Control the game using WASD keys.\n"
RESET_BOARD
  STR R7, R6, #-1
  ADD R6, R6, #-1
  AND R0, R0, #0
  AND R1, R1, #0
  ST R0, DEAD
RESET_LOOP
  ADD R2, R1, R5
  STR R0, R2, #0
  ADD R1, R1, #1
  ADD R2, R1, #-16
  BRn RESET_LOOP
RESET_RANDOM
  JSR ADD_RANDOM_CELL
  JSR ADD_RANDOM_CELL
  LDR R7, R6, #0
  ADD R6, R6, #1
  RET
GET_KEY
  STR R7, R6, #-1
  ADD R6, R6, #-1
GET_KEY_LOOP
  GETC
  LD R1, W_NEG
  ADD R1, R0, R1
  BRz UP
  LD R1, A_NEG
  ADD R1, R0, R1
  BRz LEFT
  LD R1, S_NEG
  ADD R1, R0, R1
  BRz DOWN
  LD R1, D_NEG
  ADD R1, R0, R1
  BRz RIGHT
  BRnzp GET_KEY_LOOP
LEFT
  JSR SLIDE_BOARD_LEFT
  BRnzp GET_KEY_CHECK
RIGHT
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  JSR SLIDE_BOARD_LEFT
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  BRnzp GET_KEY_CHECK
UP
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  JSR SLIDE_BOARD_LEFT
  JSR ROTATE_BOARD
  BRnzp GET_KEY_CHECK
DOWN
  JSR ROTATE_BOARD
  JSR SLIDE_BOARD_LEFT
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
GET_KEY_CHECK
  ADD R0, R0, #0
  BRnz GET_KEY_LOOP
GET_KEY_ADD_RANDOM
  JSR ADD_RANDOM_CELL
  ADD R0, R0, #0
  BRp GET_KEY_EXIT
GET_KEY_CHECK_DEATH
  JSR CHECK_DEATH
  ST R0, DEAD
GET_KEY_EXIT
  LDR R7, R6, #0
  ADD R6, R6, #1
  RET
W_NEG
  .FILL xFF89
A_NEG
  .FILL xFF9F
S_NEG
  .FILL xFF8D
D_NEG
  .FILL xFF9C
ROTATE_BOARD
  STR R0, R6, #-1
  ADD R6, R6, #-1
  LDR R0, R5, #1
  STR R0, R6, #-1
  LDR R0, R5, #2
  STR R0, R6, #-2
  LDR R0, R5, #3
  STR R0, R6, #-3
  ADD R6, R6, #-3
  LDR R0, R5, #0
  STR R0, R5, #3
  LDR R0, R5, #4
  STR R0, R5, #2
  LDR R0, R5, #8
  STR R0, R5, #1
  LDR R0, R5, #12
  STR R0, R5, #0
  LDR R0, R5, #13
  STR R0, R5, #4
  LDR R0, R5, #14
  STR R0, R5, #8
  LDR R0, R5, #15
  STR R0, R5, #12
  LDR R0, R5, #11
  STR R0, R5, #13
  LDR R0, R5, #7
  STR R0, R5, #14
  LDR R0, R6, #0
  STR R0, R5, #15
  LDR R0, R6, #1
  STR R0, R5, #11
  LDR R0, R6, #2
  STR R0, R5, #7
  ADD R6, R6, #3
  LDR R0, R5, #6
  STR R0, R6, #-1
  ADD R6, R6, #-1
  LDR R0, R5, #5
  STR R0, R5, #6
  LDR R0, R5, #9
  STR R0, R5, #5
  LDR R0, R5, #10
  STR R0, R5, #9
  LDR R0, R6, #0
  STR R0, R5, #10
  ADD R6, R6, #1
  LDR R0, R6, #0
  ADD R6, R6, #1
  RET
SLIDE_BOARD_LEFT
  STR R7, R6, #-1
  STR R1, R6, #-2
  ADD R6, R6, #-2
  AND R1, R1, #0
  ADD R0, R5, #0
  JSR SLIDE_ROW_LEFT
  ADD R1, R0, R1
  ADD R0, R5, #4
  JSR SLIDE_ROW_LEFT
  ADD R1, R0, R1
  ADD R0, R5, #8
  JSR SLIDE_ROW_LEFT
  ADD R1, R0, R1
  ADD R0, R5, #12
  JSR SLIDE_ROW_LEFT
  ADD R0, R0, R1
  LDR R1, R6, #0
  LDR R7, R6, #1
  ADD R6, R6, #2
  RET
SLIDE_ROW_LEFT
  STR R1, R6, #-1
  ADD R6, R6, #-1
  AND R1, R1, #0
  AND R2, R2, #0
SLIDE_CHECKSUM
  LDR R4, R0, #0
  ADD R3, R4, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #1
  ADD R3, R3, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #2
  ADD R3, R3, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #3
  ADD R3, R3, R4
  STR R3, R6, #-1
  ADD R6, R6, #-1
SLIDE_FIND_LOOP
  ADD R4, R0, R1
  LDR R4, R4, #0
  BRnz SLIDE_CHECK_NEXT
SLIDE_FOUND_BOX
  ADD R3, R0, R2
  ADD R2, R2, #1
  STR R4, R3, #0
SLIDE_CHECK_NEXT
  ADD R1, R1, #1
  ADD R4, R1, #-4
  BRn SLIDE_FIND_LOOP
  AND R1, R1, #0
SLIDE_FILL_LOOP
  ADD R4, R2, #-4
  BRz SLIDE_FIND_FIRST_MATCH
  ADD R3, R0, R2
  ADD R2, R2, #1
  STR R1, R3, #0
  BRnzp SLIDE_FILL_LOOP
SLIDE_FIND_FIRST_MATCH
  LDR R1, R0, #0
  LDR R3, R0, #1
  BRz SLIDE_FINISHED_MATCHING
  NOT R3, R3
  ADD R3, R3, #1
  ADD R3, R1, R3
  BRnp SLIDE_FIND_SECOND_MATCH
  ADD R1, R1, #1
  STR R1, R0, #0
  LDR R1, R0, #2
  STR R1, R0, #1
  LDR R1, R0, #3
  STR R1, R0, #2
  AND R1, R1, #0
  STR R1, R0, #3
SLIDE_FIND_SECOND_MATCH
  LDR R1, R0, #1
  LDR R3, R0, #2
  BRz SLIDE_FINISHED_MATCHING
  NOT R3, R3
  ADD R3, R3, #1
  ADD R3, R1, R3
  BRnp SLIDE_FIND_THIRD_MATCH
  ADD R1, R1, #1
  STR R1, R0, #1
  LDR R1, R0, #3
  STR R1, R0, #2
  AND R1, R1, #0
  STR R1, R0, #3
  BRnzp SLIDE_FINISHED_MATCHING
SLIDE_FIND_THIRD_MATCH
  LDR R1, R0, #2
  LDR R3, R0, #3
  BRz SLIDE_FINISHED_MATCHING
  NOT R3, R3
  ADD R3, R3, #1
  ADD R3, R1, R3
  BRnp SLIDE_FINISHED_MATCHING
  ADD R1, R1, #1
  STR R1, R0, #2
  AND R1, R1, #0
  STR R1, R0, #3
SLIDE_FINISHED_MATCHING
  LDR R4, R0, #0
  ADD R3, R4, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #1
  ADD R3, R3, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #2
  ADD R3, R3, R4
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  ADD R3, R3, R3
  LDR R4, R0, #3
  ADD R3, R3, R4
  NOT R3, R3
  ADD R3, R3, #1
  LDR R4, R6, #0
  AND R0, R0, #0
  ADD R3, R3, R4
  BRz SLIDE_EXIT
  ADD R0, R0, #1
SLIDE_EXIT
  LDR R1, R6, #1
  ADD R6, R6, #2
  RET
ADD_RANDOM_CELL
  STR R7, R6, #-1
  ADD R6, R6, #-1
  AND R1, R1, #0
  AND R2, R2, #0
ADD_RANDOM_LOOP
  ADD R0, R2, R5
  ADD R2, R2, #1
  STR R0, R6, #-1
  LDR R0, R0, #0
  BRp ADD_RANDOM_NEXT
ADD_RANDOM_EMPTY
  ADD R1, R1, #1
  ADD R6, R6, #-1
ADD_RANDOM_NEXT
  ADD R0, R2, #-16
  BRn ADD_RANDOM_LOOP
ADD_RANDOM_COUNTED
  ADD R0, R1, #0
  BRz ADD_RANDOM_EXIT
  JSR RAND_MOD
  ADD R2, R0, R6
  LD R0, RANDOM_4_MOD
  JSR RAND_MOD
  ADD R0, R0, #0
  BRz ADD_RANDOM_4
ADD_RANDOM_2
  AND R0, R0, #0
  ADD R0, R0, #1
  BRnzp ADD_RANDOM_RESTORE
ADD_RANDOM_4
  ADD R0, R0, #2
ADD_RANDOM_RESTORE
  LDR R2, R2, #0
  STR R0, R2, #0
  ADD R0, R1, #-1
ADD_RANDOM_EXIT
  ADD R6, R6, R1
  LDR R7, R6, #0
  ADD R6, R6, #1
  RET
RANDOM_4_MOD
  .FILL xB
CHECK_DEATH
  STR R7, R6, #-1
  ADD R6, R6, #-1
  AND R4, R4, #0
  ADD R4, R4, #1
CHECK_DEATH_LOOP
  ADD R0, R5, #0
  JSR CHECK_DEATH_ROW
  BRz DEATH_FINISHED_CHECKING
  ADD R0, R5, #4
  JSR CHECK_DEATH_ROW
  BRz DEATH_FINISHED_CHECKING
  ADD R0, R5, #8
  JSR CHECK_DEATH_ROW
  BRz DEATH_FINISHED_CHECKING
  ADD R0, R5, #12
  JSR CHECK_DEATH_ROW
  BRz DEATH_FINISHED_CHECKING
  ADD R4, R4, #-1
  BRn DEATH_FINISHED_CHECKING
  JSR ROTATE_BOARD
  BRnzp CHECK_DEATH_LOOP
DEATH_FINISHED_CHECKING
  ADD R4, R4, #0
  BRp DEATH_EXIT
DEATH_ROTATE
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
  JSR ROTATE_BOARD
DEATH_EXIT
  LDR R7, R6, #0
  ADD R6, R6, #1
  ADD R0, R1, #0
  RET
CHECK_DEATH_ROW
  LDR R2, R0, #0
  LDR R3, R0, #1
  NOT R3, R3
  ADD R3, R3, #1
  ADD R1, R2, R3
  BRz DEATH_ROW_PLAYS_AVAILABLE
  LDR R2, R0, #2
  ADD R1, R2, R3
  BRz DEATH_ROW_PLAYS_AVAILABLE
  LDR R3, R0, #3
  NOT R3, R3
  ADD R3, R3, #1
  ADD R1, R2, R3
  BRz DEATH_ROW_PLAYS_AVAILABLE
DEATH_ROW_NO_PLAYS
  AND R1, R1, #0
  ADD R1, R1, #1
DEATH_ROW_PLAYS_AVAILABLE
  RET
DISPLAY_BOARD
  STR R7, R6, #-1
  ADD R6, R6, #-1
  LEA R0, CLEAR_STRING
  PUTS
  LD R1, BOARD_LABELS_TBL_PTR
  AND R2, R2, #0
  LEA R0, LINE_BORDER
  PUTS
  LD R0, NEW_LINE
  OUT
DISPLAY_NEXT_LINE
  LEA R0, EMPTY_BORDER
  PUTS
  LD R0, NEW_LINE
  OUT
  LEA R0, LEFT_BORDER
  PUTS
DISPLAY_NEXT_SPACE
  LD R0, SPACE
  OUT
  ADD R3, R5, R2
  LDR R3, R3, #0
  ADD R2, R2, #1
  ADD R0, R1, R3
  LDR R0, R0, #0
  PUTS
  LD R0, SPACE
  OUT
  ADD R0, R2, #-4
  BRz DISPLAY_RIGHT_BORDER
  ADD R0, R2, #-8
  BRz DISPLAY_RIGHT_BORDER
  ADD R0, R2, #-12
  BRz DISPLAY_RIGHT_BORDER
  ADD R0, R2, #-16
  BRz DISPLAY_RIGHT_BORDER
  BRnp DISPLAY_NEXT_SPACE
DISPLAY_RIGHT_BORDER
  LEA R0, RIGHT_BORDER
  PUTS
  ADD R0, R2, #-16
  BRnp DISPLAY_NEXT_LINE
DISPLAY_BOTTOM_BORDER
  LEA R0, EMPTY_BORDER
  PUTS
  LD R0, NEW_LINE
  OUT
  LEA R0, LINE_BORDER
  PUTS
  LD R0, NEW_LINE
  OUT
DIS_FINISH
  LDR R7, R6, #0
  ADD R6, R6, #1
  RET
CLEAR_STRING
  .STRINGZ "\e[2J\e[H\e[3J"
LINE_BORDER
  .STRINGZ "+--------------------------+"
EMPTY_BORDER
  .STRINGZ "|                          |"
LEFT_BORDER
  .STRINGZ "| "
RIGHT_BORDER
  .STRINGZ " |\n"
SPACE
  .FILL x20
NEW_LINE
  .FILL xA
BOARD_LABELS_TBL_PTR
  .FILL ANSI_BOARD_LABELS_TBL
RAND_MOD
  STR R0, R6, #-1
  STR R1, R6, #-2
  STR R2, R6, #-3
  STR R7, R6, #-4
  ADD R6, R6, #-4
  LD R0, RAND_SEED
  LD R1, RAND_Q
  JSR MOD_DIV
  LD R1, RAND_A
  JSR MULT
  ST R0, RAND_SEED
  LDR R1, R6, #3
  JSR MOD_DIV
  LDR R7, R6, #0
  LDR R2, R6, #1
  LDR R1, R6, #2
  ADD R6, R6, #4
  RET
RAND_INIT
  .FILL x0
RAND_SEED
  .FILL xC20D
RAND_A
  .FILL x7
RAND_M
  .FILL x7FFF
RAND_Q
  .FILL x1249
PROMPT
  STR R0, R6, #-1
  STR R1, R6, #-2
  STR R7, R6, #-3
  ADD R6, R6, #-3
PROMPT_LOOP
  LDR R0, R6, #2
  PUTS
  JSR GETC_SEED
  OUT
  ADD R1, R0, #0
  LD R0, PROMPT_NEW_LINE
  OUT
  LD R0, PROMPT_RESPONSE_y
  ADD R0, R0, R1
  BRz PROMPT_YES
  LD R0, PROMPT_RESPONSE_n
  ADD R0, R0, R1
  BRz PROMPT_NO
PROMPT_INVALID
  ADD R0, R1, #0
  OUT
  LEA R0, PROMPT_INVALID_MESSAGE
  PUTS
  BRnzp PROMPT_LOOP
PROMPT_NO
  AND R0, R0, #0
  BRnzp PROMPT_EXIT
PROMPT_YES
  AND R0, R0, #0
  ADD R0, R0, #1
PROMPT_EXIT
  LDR R7, R6, #0
  LDR R1, R6, #1
  ADD R6, R6, #3
  ADD R0, R0, #0
  RET
PROMPT_INVALID_MESSAGE
  .STRINGZ " is not a valid input.\n\n"
PROMPT_RESPONSE_y
  .FILL xFF87
PROMPT_RESPONSE_n
  .FILL xFF92
PROMPT_NEW_LINE
  .FILL xA
GETC_SEED
  STR R1, R6, #-1
  ADD R6, R6, #-1
  AND R1, R1, #0
GETC_SEED_LOOP
  ADD R1, R1, #1
  LDI R0, OS_KBSR
  BRzp GETC_SEED_LOOP
  LD R0, SEED_MASK
  AND R1, R1, R0
  LDI R0, OS_KBDR
  ST R1, RAND_SEED
  ST R1, RAND_INIT
  LDR R1, R6, #0
  ADD R6, R6, #1
  RET
OS_KBSR
  .FILL xFE00
OS_KBDR
  .FILL xFE02
SEED_MASK
  .FILL x7FFF
MOD_DIV
  STR R1, R6, #-1
  STR R2, R6, #-2
  STR R3, R6, #-3
  ADD R6, R6, #-3
  NOT R2, R1
  ADD R2, R2, #1
  BRz MOD_DIV_EX
  AND R1, R1, #0
MOD_DIV_LOOP
  ADD R1, R1, #1
  ADD R0, R0, R2
  BRp MOD_DIV_LOOP
  BRz MOD_DIV_END
  LDR R2, R6, #2
  ADD R1, R1, #-1
  ADD R0, R0, R2
MOD_DIV_END
  LDR R3, R6, #0
  LDR R2, R6, #1
  ADD R6, R6, #3
  RET
MOD_DIV_EX
  HALT
MULT
  ADD R0, R0, #0
  BRz MULT_ZERO
  ADD R1, R1, #0
  BRz MULT_ZERO
  STR R1, R6, #-1
  STR R2, R6, #-2
  STR R3, R6, #-3
  STR R4, R6, #-4
  ADD R6, R6, #-4
  AND R2, R2, #0
  ADD R3, R2, #1
MULT_LOOP
  AND R4, R0, R3
  BRnz #1
  ADD R2, R2, R1
  ADD R1, R1, R1
  ADD R3, R3, R3
  BRp MULT_LOOP
  ADD R0, R2, #0
MULT_END
  LDR R4, R6, #0
  LDR R3, R6, #1
  LDR R2, R6, #2
  LDR R1, R6, #3
  ADD R6, R6, #4
  RET
MULT_ZERO
  AND R0, R0, #0
  RET
TEXT_BOARD_LABELS_TBL
  .FILL TEXT_BOARD_LABELS_0
  .FILL TEXT_BOARD_LABELS_1
  .FILL TEXT_BOARD_LABELS_2
  .FILL TEXT_BOARD_LABELS_3
  .FILL TEXT_BOARD_LABELS_4
  .FILL TEXT_BOARD_LABELS_5
  .FILL TEXT_BOARD_LABELS_6
  .FILL TEXT_BOARD_LABELS_7
  .FILL TEXT_BOARD_LABELS_8
  .FILL TEXT_BOARD_LABELS_9
  .FILL TEXT_BOARD_LABELS_10
  .FILL TEXT_BOARD_LABELS_11
  .FILL TEXT_BOARD_LABELS_12
  .FILL TEXT_BOARD_LABELS_13
  .FILL TEXT_BOARD_LABELS_14
  .FILL TEXT_BOARD_LABELS_15
  .FILL TEXT_BOARD_LABELS_16
ANSI_BOARD_LABELS_TBL
  .FILL ANSI_BOARD_LABELS_0
  .FILL ANSI_BOARD_LABELS_1
  .FILL ANSI_BOARD_LABELS_2
  .FILL ANSI_BOARD_LABELS_3
  .FILL ANSI_BOARD_LABELS_4
  .FILL ANSI_BOARD_LABELS_5
  .FILL ANSI_BOARD_LABELS_6
  .FILL ANSI_BOARD_LABELS_7
  .FILL ANSI_BOARD_LABELS_8
  .FILL ANSI_BOARD_LABELS_9
  .FILL ANSI_BOARD_LABELS_10
  .FILL ANSI_BOARD_LABELS_11
  .FILL ANSI_BOARD_LABELS_12
  .FILL ANSI_BOARD_LABELS_13
  .FILL ANSI_BOARD_LABELS_14
  .FILL ANSI_BOARD_LABELS_15
  .FILL ANSI_BOARD_LABELS_16
TEXT_BOARD_LABELS_0
  .STRINGZ "    "
TEXT_BOARD_LABELS_1
  .STRINGZ " 2  "
TEXT_BOARD_LABELS_2
  .STRINGZ " 4  "
TEXT_BOARD_LABELS_3
  .STRINGZ " 8  "
TEXT_BOARD_LABELS_4
  .STRINGZ " 16 "
TEXT_BOARD_LABELS_5
  .STRINGZ " 32 "
TEXT_BOARD_LABELS_6
  .STRINGZ " 64 "
TEXT_BOARD_LABELS_7
  .STRINGZ "128 "
TEXT_BOARD_LABELS_8
  .STRINGZ "256 "
TEXT_BOARD_LABELS_9
  .STRINGZ "512 "
TEXT_BOARD_LABELS_10
  .STRINGZ "1024"
TEXT_BOARD_LABELS_11
  .STRINGZ "2048"
TEXT_BOARD_LABELS_12
  .STRINGZ "4096"
TEXT_BOARD_LABELS_13
  .STRINGZ "8192"
TEXT_BOARD_LABELS_14
  .STRINGZ "2^14"
TEXT_BOARD_LABELS_15
  .STRINGZ "2^15"
TEXT_BOARD_LABELS_16
  .STRINGZ "2^16"
ANSI_BOARD_LABELS_0
  .STRINGZ "    "
ANSI_BOARD_LABELS_1
  .STRINGZ "\e[37m 2  \e[0m"
ANSI_BOARD_LABELS_2
  .STRINGZ "\e[1;37m 4  \e[0m"
ANSI_BOARD_LABELS_3
  .STRINGZ "\e[31m 8  \e[0m"
ANSI_BOARD_LABELS_4
  .STRINGZ "\e[31m 16 \e[0m"
ANSI_BOARD_LABELS_5
  .STRINGZ "\e[1;31m 32 \e[0m"
ANSI_BOARD_LABELS_6
  .STRINGZ "\e[1;31m 64 \e[0m"
ANSI_BOARD_LABELS_7
  .STRINGZ "\e[33m128 \e[0m"
ANSI_BOARD_LABELS_8
  .STRINGZ "\e[33m256 \e[0m"
ANSI_BOARD_LABELS_9
  .STRINGZ "\e[33m512 \e[0m"
ANSI_BOARD_LABELS_10
  .STRINGZ "\e[1;33m1024\e[0m"
ANSI_BOARD_LABELS_11
  .STRINGZ "\e[1;33m2048\e[0m"
ANSI_BOARD_LABELS_12
  .STRINGZ "\e[1;33m4096\e[0m"
ANSI_BOARD_LABELS_13
  .STRINGZ "\e[37;40m8192\e[0m"
ANSI_BOARD_LABELS_14
  .STRINGZ "\e[37;40m2^14\e[0m"
ANSI_BOARD_LABELS_15
  .STRINGZ "\e[37;40m2^15\e[0m"
ANSI_BOARD_LABELS_16
  .STRINGZ "\e[37;40m2^16\e[0m"
.END
